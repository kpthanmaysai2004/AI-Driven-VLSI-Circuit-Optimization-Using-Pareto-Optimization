import re
import csv
import random
import os

# LTspice log file path (do not change)
log_file = "C:\\Users\\Tiger\\Desktop\\nini_project\\Nand.log"

# CSV file path (do not change)
csv_file = "C:\\Users\\Tiger\\Desktop\\nini_project\\ltspice_datanands.csv"

# Read LTspice log file
with open(log_file, "r") as file:
    log_data = file.readlines()

# Extract Power and Delays from LTspice log
power_value = None
delay_a_value = None
delay_b_value = None

for line in log_data:
    if "AVG(I(VDD))" in line:
        power_value = float(re.search(r"=(-?\d+\.\d+e[+-]?\d+)", line).group(1))
    if "delay_a=" in line:
        delay_a_value = float(re.search(r"=(-?\d+\.\d+e[+-]?\d+)", line).group(1))
    if "delay_b=" in line:
        delay_b_value = float(re.search(r"=(-?\d+\.\d+e[+-]?\d+)", line).group(1))

# Use the worst-case delay
delay_value = max(delay_a_value, delay_b_value)

# Fixed 180nm Technology Parameters
VDD = 1.8  # V
num_simulations = 20000
L = 0.18  # µm

# Transistor Width Ranges
NMOS_range = (0.18, 5.0)
PMOS_range = (0.36, 10.0)

try:
    with open(csv_file, "a", newline="") as file:
        writer = csv.writer(file)

        # Write header if file is empty
        if os.stat(csv_file).st_size == 0:
            writer.writerow([
                "NMOS1_W", "NMOS2_W", "PMOS1_W", "PMOS2_W", "VDD", "Power (µW)",
                "Delay (ps)", "Area (µm²)", "Interconnect Area (µm²)", "Spacing Area (µm²)",
                "Total Area (µm²)", "Rise Time (ps)", "Fall Time (ps)", "Energy (fJ)",
                "Leakage Power (nW)", "Output Swing (V)", "Noise Margin High (V)",
                "Noise Margin Low (V)", "Threshold Voltage (V)", "Load Capacitance (fF)",
                "Gate Overdrive (V)"
            ])

        for _ in range(num_simulations):
            # Generate random widths for 4 transistors
            NMOS1_W = round(random.uniform(*NMOS_range), 2)
            NMOS2_W = round(random.uniform(*NMOS_range), 2)
            PMOS1_W = round(random.uniform(*PMOS_range), 2)
            PMOS2_W = round(random.uniform(*PMOS_range), 2)

            # Calculate transistor area
            A_transistors = (NMOS1_W + NMOS2_W + PMOS1_W + PMOS2_W) * L  # µm²

            # Calculate interconnect and spacing areas
            K_metal = random.uniform(1.5, 3.0)
            A_interconnect = K_metal * A_transistors

            K_spacing = random.uniform(0.5, 1.5)
            A_spacing = K_spacing * A_transistors

            A_total = A_transistors + A_interconnect + A_spacing

            # Apply variations
            power_variation = random.uniform(0.75, 1.3)
            delay_variation = random.uniform(0.85, 1.15)

            power_uw = abs(power_value * VDD) * 1e6 * power_variation if power_value is not None else None
            delay_ps = delay_value * 1e12 * delay_variation if delay_value is not None else None

            rise_time_ps = delay_ps * random.uniform(0.25, 0.65) if delay_ps is not None else None
            fall_time_ps = delay_ps * random.uniform(0.25, 0.65) if delay_ps is not None else None
            energy_fJ = power_uw * delay_ps * 1e-6 if power_uw and delay_ps else None
            leakage_power_nW = power_uw * random.uniform(0.005, 0.04) if power_uw else None
            output_swing = VDD * random.uniform(0.85, 1.0)
            noise_margin_high = VDD * random.uniform(0.25, 0.55)
            noise_margin_low = VDD * random.uniform(0.25, 0.55)
            threshold_voltage = VDD * random.uniform(0.15, 0.35)
            load_capacitance = random.uniform(1.0, 10.0)
            gate_overdrive = VDD - threshold_voltage

            writer.writerow([
                NMOS1_W, NMOS2_W, PMOS1_W, PMOS2_W, VDD, power_uw, delay_ps,
                A_transistors, A_interconnect, A_spacing, A_total, rise_time_ps,
                fall_time_ps, energy_fJ, leakage_power_nW, output_swing,
                noise_margin_high, noise_margin_low, threshold_voltage,
                load_capacitance, gate_overdrive
            ])

        print(f"✅ Successfully saved {num_simulations} entries to: {csv_file}")

except Exception as e:
    print(f"❌ Error: Failed to write to CSV. Reason: {e}")
